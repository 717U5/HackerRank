import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    public static int flippingMatrix(List<List<Integer>> matrix) {
        int total = 0;
        int n = matrix.size()/2;

        /*each value have another 3 mirror value with different location in the matrix
          a b b a
          c d d c
          c d d c
          a b b a
          no matter how you flip those you can one get one out of four value in the upper left corner part
          so just split the matrix into four elements (a,b,c,d) */


        //use nested loop to find the largest number in each elements
        for(int row=0; row<n; row++){
            for(int column=0; column<n; column++){
                int a = matrix.get(row).get(column);
                int b = matrix.get(row).get(2*n-1-column);
                int c = matrix.get(2*n-1-row).get(column);
                int d = matrix.get(2*n-1-row).get(2*n-1-column);
                total += Math.max(a, Math.max(b, Math.max(c, d)));    //use Math.max(a,b) to sum up each element
            }
        }
        return total;

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, q).forEach(qItr -> {
            try {
                int n = Integer.parseInt(bufferedReader.readLine().trim());

                List<List<Integer>> matrix = new ArrayList<>();

                IntStream.range(0, 2 * n).forEach(i -> {
                    try {
                        matrix.add(
                            Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                                .map(Integer::parseInt)
                                .collect(toList())
                        );
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                });

                int result = Result.flippingMatrix(matrix);

                bufferedWriter.write(String.valueOf(result));
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
