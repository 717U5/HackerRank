import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    public static int palindromeIndex(String s) {

      //just use loop to compare the char
      for(int x=0; x<=(s.length()-1)/2; x++){
        if(s.charAt(x) != s.charAt(s.length()-1-x)){
          if(s.charAt(x+1) == s.charAt(s.length()-1-x) && s.charAt(x+2) == s.charAt(s.length()-2-x)){
            return x;
          }
          if(s.charAt(x) == s.charAt(s.length()-2-x)){
            return s.length()-1-x;
          }
        }
      }
      return -1;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, q).forEach(qItr -> {
            try {
                String s = bufferedReader.readLine();

                int result = Result.palindromeIndex(s);

                bufferedWriter.write(String.valueOf(result));
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
